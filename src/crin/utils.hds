import libc.{exit, fputs, stderr, File}
import libc as libc

type Stream = *File

def todo[T](): T {
    fputs(b"panic: Not implemented\n", stderr())
    exit(1)
    val ptr: *T = nullptr
    return *pointer_cast[T](ptr)
}

extension FileExtensions for File {
    def print[T](*this, message: T): *File where FPut[T] {
        FPut[T].fput(message, this)
        return this
    }

    def println[T](*this, message: T): *File where FPut[T] {
        this
            .print(message)
            .print(b"\n")
        return this
    }

    def printf[T](*this, format_string: *u8, value: T): *File
        where FPrintf[T]
    {
        FPrintf[T].fprintf(this, format_string, value)
        return this
    }
}

trait FPrintf[Self] {
    def fprintf(file: *File, format_string: *u8, value: Self): Void
}

implementation FPrintf[u32] {
    def fprintf(file: *File, format_string: *u8, value: u32): Void {
        fprintf_u32(file, format_string, value)
    }
}

implementation FPrintf[usize] {
    def fprintf(file: *File, format_string: *u8, value: usize): Void {
        fprintf_usize(file, format_string, value)
    }
}

implementation FPrintf[u8] {
    def fprintf(file: *File, format_string: *u8, value: u8): Void {
        fprintf_u8(file, format_string, value)
    }
}


implementation FPrintf[f64] {
    def fprintf(file: *File, format_string: *u8, value: f64): Void {
        fprintf_f64(file, format_string, value)
    }
}

const stdout = libc.stdout
const stderr = libc.stderr

extern def fprintf_u32(*File, *u8, u32): Void = fprintf_u32;
extern def fprintf_usize(*File, *u8, usize): Void = fprintf_usize;
extern def fprintf_u8(*File, *u8, u8): Void = fprintf_u8;
extern def fprintf_f64(*File, *u8, f64): Void = fprintf_f64;

trait FPut[Self] {
    def fput(self: Self, file: *File): Void
}

implementation FPut[*u8] {
    def fput(self: *u8, file: *File): Void {
        fputs(self, file)
    }
}

implementation FPut[u8] {
    def fput(self: u8, file: *File): Void {
        fprintf_u8(file, b"%d", self)
    }
}

implementation FPut[f64] {
    def fput(self: f64, file: *File): Void {
        fprintf_f64(file, b"%lf", self)
    }
}
