import crin.utils.{StaticStringable}
import crin.utils.{usize}
import crin.assert.{assert_unreachable}
import libc.{File, stderr}

sealed type OpCode {
    Return()
}

def opcode_from_byte(byte: u8): OpCode {
    if byte == 0 {
        return OpCode.Return()
    }

    stderr().printf[u8](b"Invalid opcode byte: %d", byte)
    return assert_unreachable[OpCode] || b""
}

extension OpCodeExtensions for OpCode {
    def to_byte(this): u8 {
        return when(this) {
            is Return -> 0 as u8
        }
    }

    def arg_size_in_bytes(this): usize {
        return when(this) {
            is Return -> 0 as usize
        }
    }
}

implementation StaticStringable[OpCode] {
    def to_static_string(self: OpCode): *u8 {
        return when(self) {
            is Return -> b"Return"
        }
    }
}

