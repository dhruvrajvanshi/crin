import crin.pointer.{}
import crin.memory.{grow_array, grow_capacity, free_array}
import crin.utils.{usize, todo}
import libc.{stdout}
import crin.opcode.{opcode_from_byte}
import crin.value.{ValueArray, new_value_array, Value}
import crin.assert.{assert}

struct Chunk {
    val count: usize
    val capacity: usize
    val code: *mut u8
    val constants: ValueArray
}

def new_chunk(): Chunk {
    return Chunk(0, 0, nullptr, new_value_array())
}

extension ChunkExtensions for Chunk {
    def write(*mut this, byte: u8): Void {
        val mut chunk = this
        if chunk.capacity < chunk.count + 1 {
            val old_capacity = chunk.capacity

            chunk.capacity = grow_capacity(old_capacity)
            chunk.code = grow_array(chunk.code, old_capacity, chunk.capacity)
        }

        chunk.code.store_offset(chunk.count, byte)
        chunk.count = chunk.count + 1
    }

    def free(*mut this): Void {
        val mut chunk = this
        free_array(chunk.code, chunk.capacity)
        (&mut chunk.constants).free()
        this.init()
    }

    def init(*mut this): Void {
        val mut chunk = this
        chunk.count = 0
        chunk.capacity = 0
        chunk.code = nullptr

        (&mut chunk.constants).init()
    }

    def disassemble(*this, name: *u8): Void {
        val chunk = this
        stdout()
            .print(b"== ")
            .print(name)
            .print(b" ==\n")

        val mut offset: usize = 0;
        while offset < chunk.count {
            offset = _disassemble_instruction(chunk, offset)
        }
    }

    def add_constant(*mut this, value: Value): u8 {
        val chunk = this

        assert(chunk.constants.count < 255) || b"Too many constants"
        (&mut chunk.constants).write(value)

        
        return (chunk.constants.count - 1) as u8
    }
}

def _disassemble_instruction(chunk: *Chunk, offset: usize): usize {
    val opcode_byte = chunk.code.load_offset(offset)
    val opcode = opcode_from_byte(opcode_byte)
    stdout()
        .printf(b"%04d ", offset)
        .print(opcode)

    when (opcode) {
        is Return -> stdout().print(b""),
        is Constant -> stdout()
            .print(b" ")
            .print(chunk.code.load_offset(offset + 1))
    }
    stdout().print(b"\n")
    
    return offset + 1 + opcode.arg_size_in_bytes()
}
